/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"
#import "Webrtc.h"

@implementation Call

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithFromName: (NSString *) fromName toName: (NSString *) toName fromUUID: (NSString *) fromUUID toUUID: (NSString *) toUUID
{
  self = [super init];
  if (self)  {
    _fromName = fromName;
    _fromNameIsSet = YES;
    _toName = toName;
    _toNameIsSet = YES;
    _fromUUID = fromUUID;
    _fromUUIDIsSet = YES;
    _toUUID = toUUID;
    _toUUIDIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"fromName"])
    {
      _fromName = [decoder decodeObjectForKey: @"fromName"];
      _fromNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"toName"])
    {
      _toName = [decoder decodeObjectForKey: @"toName"];
      _toNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"fromUUID"])
    {
      _fromUUID = [decoder decodeObjectForKey: @"fromUUID"];
      _fromUUIDIsSet = YES;
    }
    if ([decoder containsValueForKey: @"toUUID"])
    {
      _toUUID = [decoder decodeObjectForKey: @"toUUID"];
      _toUUIDIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_fromNameIsSet)
  {
    [encoder encodeObject: _fromName forKey: @"fromName"];
  }
  if (_toNameIsSet)
  {
    [encoder encodeObject: _toName forKey: @"toName"];
  }
  if (_fromUUIDIsSet)
  {
    [encoder encodeObject: _fromUUID forKey: @"fromUUID"];
  }
  if (_toUUIDIsSet)
  {
    [encoder encodeObject: _toUUID forKey: @"toUUID"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _fromNameIsSet ? 2654435761 : 0;
  if (_fromNameIsSet)
  {
    hash = (hash * 31) ^ [_fromName hash];
  }
  hash = (hash * 31) ^ _toNameIsSet ? 2654435761 : 0;
  if (_toNameIsSet)
  {
    hash = (hash * 31) ^ [_toName hash];
  }
  hash = (hash * 31) ^ _fromUUIDIsSet ? 2654435761 : 0;
  if (_fromUUIDIsSet)
  {
    hash = (hash * 31) ^ [_fromUUID hash];
  }
  hash = (hash * 31) ^ _toUUIDIsSet ? 2654435761 : 0;
  if (_toUUIDIsSet)
  {
    hash = (hash * 31) ^ [_toUUID hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Call class]]) {
    return NO;
  }
  Call *other = (Call *)anObject;
  if ((_fromNameIsSet != other->_fromNameIsSet) ||
      (_fromNameIsSet && ((_fromName || other->_fromName) && ![_fromName isEqual:other->_fromName]))) {
    return NO;
  }
  if ((_toNameIsSet != other->_toNameIsSet) ||
      (_toNameIsSet && ((_toName || other->_toName) && ![_toName isEqual:other->_toName]))) {
    return NO;
  }
  if ((_fromUUIDIsSet != other->_fromUUIDIsSet) ||
      (_fromUUIDIsSet && ((_fromUUID || other->_fromUUID) && ![_fromUUID isEqual:other->_fromUUID]))) {
    return NO;
  }
  if ((_toUUIDIsSet != other->_toUUIDIsSet) ||
      (_toUUIDIsSet && ((_toUUID || other->_toUUID) && ![_toUUID isEqual:other->_toUUID]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Call * val = [Call new];
  if (_fromNameIsSet)
  {
    val.fromName = [self.fromName copy];
  }
  if (_toNameIsSet)
  {
    val.toName = [self.toName copy];
  }
  if (_fromUUIDIsSet)
  {
    val.fromUUID = [self.fromUUID copy];
  }
  if (_toUUIDIsSet)
  {
    val.toUUID = [self.toUUID copy];
  }
  return val;
}

- (void) setFromName: (NSString *) fromName {
  _fromName = fromName;
  _fromNameIsSet = YES;
}

- (void) unsetFromName {
  _fromName = nil;
  _fromNameIsSet = NO;
}

- (void) setToName: (NSString *) toName {
  _toName = toName;
  _toNameIsSet = YES;
}

- (void) unsetToName {
  _toName = nil;
  _toNameIsSet = NO;
}

- (void) setFromUUID: (NSString *) fromUUID {
  _fromUUID = fromUUID;
  _fromUUIDIsSet = YES;
}

- (void) unsetFromUUID {
  _fromUUID = nil;
  _fromUUIDIsSet = NO;
}

- (void) setToUUID: (NSString *) toUUID {
  _toUUID = toUUID;
  _toUUIDIsSet = YES;
}

- (void) unsetToUUID {
  _toUUID = nil;
  _toUUIDIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.fromName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.toName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.fromUUID = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.toUUID = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Call" error: __thriftError]) return NO;
  if (_fromNameIsSet) {
    if (_fromName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fromName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _fromName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_toNameIsSet) {
    if (_toName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"toName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _toName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_fromUUIDIsSet) {
    if (_fromUUID != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fromUUID" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _fromUUID error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_toUUIDIsSet) {
    if (_toUUID != nil) {
      if (![outProtocol writeFieldBeginWithName: @"toUUID" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _toUUID error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_fromNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"fromName"}];
    }
  }
  if (!_toNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"toName"}];
    }
  }
  if (!_fromUUIDIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"fromUUID"}];
    }
  }
  if (!_toUUIDIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"toUUID"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Call("];
  [ms appendString: @"fromName:"];
  [ms appendFormat: @"\"%@\"", _fromName];
  [ms appendString: @",toName:"];
  [ms appendFormat: @"\"%@\"", _toName];
  [ms appendString: @",fromUUID:"];
  [ms appendFormat: @"\"%@\"", _fromUUID];
  [ms appendString: @",toUUID:"];
  [ms appendFormat: @"\"%@\"", _toUUID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CallResult

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithResponse: (NSString *) response
{
  self = [super init];
  if (self)  {
    _response = response;
    _responseIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"response"])
    {
      _response = [decoder decodeObjectForKey: @"response"];
      _responseIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_responseIsSet)
  {
    [encoder encodeObject: _response forKey: @"response"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _responseIsSet ? 2654435761 : 0;
  if (_responseIsSet)
  {
    hash = (hash * 31) ^ [_response hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CallResult class]]) {
    return NO;
  }
  CallResult *other = (CallResult *)anObject;
  if ((_responseIsSet != other->_responseIsSet) ||
      (_responseIsSet && ((_response || other->_response) && ![_response isEqual:other->_response]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  CallResult * val = [CallResult new];
  if (_responseIsSet)
  {
    val.response = [self.response copy];
  }
  return val;
}

- (void) setResponse: (NSString *) response {
  _response = response;
  _responseIsSet = YES;
}

- (void) unsetResponse {
  _response = nil;
  _responseIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.response = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CallResult" error: __thriftError]) return NO;
  if (_responseIsSet) {
    if (_response != nil) {
      if (![outProtocol writeFieldBeginWithName: @"response" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _response error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_responseIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"response"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CallResult("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"\"%@\"", _response];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterUserId

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (NSString *) userId firebaseToken: (NSString *) firebaseToken
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _firebaseToken = firebaseToken;
    _firebaseTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"firebaseToken"])
    {
      _firebaseToken = [decoder decodeObjectForKey: @"firebaseToken"];
      _firebaseTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_firebaseTokenIsSet)
  {
    [encoder encodeObject: _firebaseToken forKey: @"firebaseToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _firebaseTokenIsSet ? 2654435761 : 0;
  if (_firebaseTokenIsSet)
  {
    hash = (hash * 31) ^ [_firebaseToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegisterUserId class]]) {
    return NO;
  }
  RegisterUserId *other = (RegisterUserId *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_firebaseTokenIsSet != other->_firebaseTokenIsSet) ||
      (_firebaseTokenIsSet && ((_firebaseToken || other->_firebaseToken) && ![_firebaseToken isEqual:other->_firebaseToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RegisterUserId * val = [RegisterUserId new];
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  if (_firebaseTokenIsSet)
  {
    val.firebaseToken = [self.firebaseToken copy];
  }
  return val;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setFirebaseToken: (NSString *) firebaseToken {
  _firebaseToken = firebaseToken;
  _firebaseTokenIsSet = YES;
}

- (void) unsetFirebaseToken {
  _firebaseToken = nil;
  _firebaseTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.firebaseToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterUserId" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_firebaseTokenIsSet) {
    if (_firebaseToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"firebaseToken" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _firebaseToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_userIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"userId"}];
    }
  }
  if (!_firebaseTokenIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"firebaseToken"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterUserId("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @",firebaseToken:"];
  [ms appendFormat: @"\"%@\"", _firebaseToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterResult

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithResponse: (NSString *) response
{
  self = [super init];
  if (self)  {
    _response = response;
    _responseIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"response"])
    {
      _response = [decoder decodeObjectForKey: @"response"];
      _responseIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_responseIsSet)
  {
    [encoder encodeObject: _response forKey: @"response"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _responseIsSet ? 2654435761 : 0;
  if (_responseIsSet)
  {
    hash = (hash * 31) ^ [_response hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegisterResult class]]) {
    return NO;
  }
  RegisterResult *other = (RegisterResult *)anObject;
  if ((_responseIsSet != other->_responseIsSet) ||
      (_responseIsSet && ((_response || other->_response) && ![_response isEqual:other->_response]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RegisterResult * val = [RegisterResult new];
  if (_responseIsSet)
  {
    val.response = [self.response copy];
  }
  return val;
}

- (void) setResponse: (NSString *) response {
  _response = response;
  _responseIsSet = YES;
}

- (void) unsetResponse {
  _response = nil;
  _responseIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.response = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterResult" error: __thriftError]) return NO;
  if (_responseIsSet) {
    if (_response != nil) {
      if (![outProtocol writeFieldBeginWithName: @"response" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _response error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_responseIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"response"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterResult("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"\"%@\"", _response];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *WebrtcErrorDomain = @"WebrtcErrorDomain";


@interface Webrtc_call_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Call * call;
@property (assign, nonatomic) BOOL callIsSet;
- (void) unsetCall;


- (instancetype) initWithCall: (Call *) call;

@end

@implementation Webrtc_call_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCall: (Call *) call
{
  self = [super init];
  if (self)  {
    _call = call;
    _callIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"call"])
    {
      _call = [decoder decodeObjectForKey: @"call"];
      _callIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_callIsSet)
  {
    [encoder encodeObject: _call forKey: @"call"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _callIsSet ? 2654435761 : 0;
  if (_callIsSet)
  {
    hash = (hash * 31) ^ [_call hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Webrtc_call_args class]]) {
    return NO;
  }
  Webrtc_call_args *other = (Webrtc_call_args *)anObject;
  if ((_callIsSet != other->_callIsSet) ||
      (_callIsSet && ((_call || other->_call) && ![_call isEqual:other->_call]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Webrtc_call_args * val = [Webrtc_call_args new];
  if (_callIsSet)
  {
    val.call = [self.call copy];
  }
  return val;
}

- (void) setCall: (Call *) call {
  _call = call;
  _callIsSet = YES;
}

- (void) unsetCall {
  _call = nil;
  _callIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Call *fieldValue = [[Call alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.call = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Webrtc_call_args" error: __thriftError]) return NO;
  if (_callIsSet) {
    if (_call != nil) {
      if (![outProtocol writeFieldBeginWithName: @"call" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_call write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Webrtc_call_args("];
  [ms appendString: @"call:"];
  [ms appendFormat: @"%@", _call];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Webrtc_call_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) CallResult * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (CallResult *) success;

@end

@implementation Webrtc_call_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (CallResult *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Webrtc_call_result class]]) {
    return NO;
  }
  Webrtc_call_result *other = (Webrtc_call_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Webrtc_call_result * val = [Webrtc_call_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  return val;
}

- (void) setSuccess: (CallResult *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          CallResult *fieldValue = [[CallResult alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Webrtc_call_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Webrtc_call_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Webrtc_registerUserId_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RegisterUserId * registerUserId;
@property (assign, nonatomic) BOOL registerUserIdIsSet;
- (void) unsetRegisterUserId;


- (instancetype) initWithRegisterUserId: (RegisterUserId *) registerUserId;

@end

@implementation Webrtc_registerUserId_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRegisterUserId: (RegisterUserId *) registerUserId
{
  self = [super init];
  if (self)  {
    _registerUserId = registerUserId;
    _registerUserIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"registerUserId"])
    {
      _registerUserId = [decoder decodeObjectForKey: @"registerUserId"];
      _registerUserIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_registerUserIdIsSet)
  {
    [encoder encodeObject: _registerUserId forKey: @"registerUserId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _registerUserIdIsSet ? 2654435761 : 0;
  if (_registerUserIdIsSet)
  {
    hash = (hash * 31) ^ [_registerUserId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Webrtc_registerUserId_args class]]) {
    return NO;
  }
  Webrtc_registerUserId_args *other = (Webrtc_registerUserId_args *)anObject;
  if ((_registerUserIdIsSet != other->_registerUserIdIsSet) ||
      (_registerUserIdIsSet && ((_registerUserId || other->_registerUserId) && ![_registerUserId isEqual:other->_registerUserId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Webrtc_registerUserId_args * val = [Webrtc_registerUserId_args new];
  if (_registerUserIdIsSet)
  {
    val.registerUserId = [self.registerUserId copy];
  }
  return val;
}

- (void) setRegisterUserId: (RegisterUserId *) registerUserId {
  _registerUserId = registerUserId;
  _registerUserIdIsSet = YES;
}

- (void) unsetRegisterUserId {
  _registerUserId = nil;
  _registerUserIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RegisterUserId *fieldValue = [[RegisterUserId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.registerUserId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Webrtc_registerUserId_args" error: __thriftError]) return NO;
  if (_registerUserIdIsSet) {
    if (_registerUserId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"registerUserId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_registerUserId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Webrtc_registerUserId_args("];
  [ms appendString: @"registerUserId:"];
  [ms appendFormat: @"%@", _registerUserId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Webrtc_registerUserId_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RegisterResult * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RegisterResult *) success;

@end

@implementation Webrtc_registerUserId_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RegisterResult *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Webrtc_registerUserId_result class]]) {
    return NO;
  }
  Webrtc_registerUserId_result *other = (Webrtc_registerUserId_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Webrtc_registerUserId_result * val = [Webrtc_registerUserId_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  return val;
}

- (void) setSuccess: (RegisterResult *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RegisterResult *fieldValue = [[RegisterResult alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Webrtc_registerUserId_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Webrtc_registerUserId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface WebrtcClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation WebrtcClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_call: (Call *) call error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"call" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"Webrtc_call_args" error: __thriftError]) return NO;
  if (call != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"call" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![call write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_call: (CallResult * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  Webrtc_call_result * resulter = [Webrtc_call_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"call"}];
  }
  return NO;
}

- (CallResult *) call: (Call *) call error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_call : call error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  CallResult * __result;
  if (![self recv_call: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_registerUserId: (RegisterUserId *) registerUserId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerUserId" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"Webrtc_registerUserId_args" error: __thriftError]) return NO;
  if (registerUserId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"registerUserId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![registerUserId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerUserId: (RegisterResult * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  Webrtc_registerUserId_result * resulter = [Webrtc_registerUserId_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"registerUserId"}];
  }
  return NO;
}

- (RegisterResult *) registerUserId: (RegisterUserId *) registerUserId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerUserId : registerUserId error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RegisterResult * __result;
  if (![self recv_registerUserId: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface WebrtcProcessor () {
  id <Webrtc> service;
  NSDictionary * methodMap;
}
@end

@implementation WebrtcProcessor

- (id) initWithWebrtc: (id <Webrtc>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_call_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"call"];
    }
    {
      SEL s = @selector(process_registerUserId_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerUserId"];
    }
  }
  return self;
}

- (id<Webrtc>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_call_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  Webrtc_call_args * args = [Webrtc_call_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  Webrtc_call_result * result = [Webrtc_call_result new];
  CallResult * serviceResult = [service call: [args call] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"call"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerUserId_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  Webrtc_registerUserId_args * args = [Webrtc_registerUserId_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  Webrtc_registerUserId_result * result = [Webrtc_registerUserId_result new];
  RegisterResult * serviceResult = [service registerUserId: [args registerUserId] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"registerUserId"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

